package org.riking.mctesting.runner;

import org.codehaus.plexus.util.FileUtils;

import javax.swing.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreServerActions implements ActionHandler {

    private static ActionHandler[] chainedHandlers = new ActionHandler[] {
            AnyStageActions.getInstance()
    };

    private Map<String, String> properties = new HashMap<String, String>();

    public PreServerActions() { }

    @Override
    public String getPhaseName() {
        return "Pre-server";
    }

    @Override
    public ActionResult doAction(Tester tester, String[] args) throws Exception {
        String command = args[0];

        if ("Properties".equals(command)) {
            properties.put(args[1], args[2]);

            return ActionResult.NORMAL;
        } else if ("DeleteWorlds".equals(command)) {
            FileUtils.deleteDirectory(new File("world"));
            FileUtils.deleteDirectory(new File("world_nether"));
            FileUtils.deleteDirectory(new File("world_the_end"));

            tester.verbose("Deleted world, nether, end");

            File[] directories = new File(".").listFiles();
            if (directories != null) {
                for (File file : directories) {
                    if (!file.isDirectory()) continue;

                    if (new File(file, "level.dat").exists()) {
                        FileUtils.deleteDirectory(file);
                        tester.verbose("Deleted " + file.getName());
                    }
                }
            }

            return ActionResult.NORMAL;
        } else if ("Start".equals(command)) {
            // Process server.properties now

            java.util.Properties props = new java.util.Properties();
            props.load(new FileReader("server.properties"));
            props.putAll(properties);
            props.store(new FileWriter("server.properties"), " Minecraft server properties - generated by TestingWrapper");

            return ActionResult.NEXT_STAGE;
        }

        for (ActionHandler handler : chainedHandlers) {
            if (handler.doAction(tester, args) != ActionResult.NOT_FOUND) {
                return ActionResult.NORMAL;
            }
        }

        System.out.println("Not found");

        return ActionResult.NOT_FOUND;
    }
}
